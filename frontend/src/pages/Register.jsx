import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import FormGroup from "../components/common/FormGroup";
import Button from "../components/common/Button";
import { toast } from "react-toastify";
import axios from "axios";

const API_BASE_URL = import.meta.env.VITE_BACKEND_URL || "http://localhost:5001";

const Register = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [hn, setHn] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [dateOfBirth, setDateOfBirth] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [gender, setGender] = useState("female");
  const role = "patient";
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const [step, setStep] = useState(1);

  const handleNext = () => {
    setError("");

    if (!hn || !firstName || !lastName || !dateOfBirth || !gender) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    const birthDate = new Date(dateOfBirth);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDifference = today.getMonth() - birthDate.getMonth();
    const dayDifference = today.getDate() - birthDate.getDate();

    if (monthDifference < 0 || (monthDifference === 0 && dayDifference < 0)) {
      age--;
    }

    if (age < 12) {
      setError("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 12 ‡∏õ‡∏µ");
      return;
    }

    if (gender !== "female") {
      setError("‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
      return;
    }

    if (!/^\d{7}$/.test(hn)) {
      setError("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 7 ‡∏´‡∏•‡∏±‡∏Å");
      return;
    }

    setStep(2);
  };

  const handleBack = () => {
    setStep(1);
    setError("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    // Validate password
    if (password !== confirmPassword) {
      setError("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô");
      setLoading(false);
      return;
    }

    const formData = {
      email,
      password,
      role,
      hn,
      firstName,
      lastName,
      dateOfBirth,
      phoneNumber,
      gender,
    };

    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö blacklist ‡∏Å‡πà‡∏≠‡∏ô
      console.log("üîç Checking blacklist for HN:", hn);
      console.log("üìç API URL:", `${API_BASE_URL}/api/auth/check-blacklist`);

      const checkRes = await axios.post(
        `${API_BASE_URL}/api/auth/check-blacklist`,
        { hn },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ Blacklist check response:", checkRes.data);

      if (checkRes.data.isBlacklisted) {
        toast.error(
          "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
          {
            autoClose: 5000,
          }
        );
        setLoading(false);
        return;
      }

      // ‚úÖ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å blacklist - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      console.log("‚úÖ Not blacklisted - saving to localStorage");
      localStorage.setItem("pendingRegistration", JSON.stringify(formData));

      // ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Terms
      toast.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç");
      navigate("/terms");
    } catch (error) {
      console.error("‚ùå Error:", error);
      console.error("‚ùå Response:", error.response);

      if (error.code === "ERR_NETWORK") {
        toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      } else if (error.response?.status === 404) {
        toast.error("‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
      } else if (error.response?.data?.message) {
        toast.error(error.response.data.message);
      } else {
        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gray-100">
      <div className="bg-white p-8 rounded-xl shadow-lg w-full max-w-md relative z-10">
        {/* Progress Bar */}
        <div className="relative pt-1">
          <div className="flex mb-2 items-center justify-between text-primary-default">
            <div>
              <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full bg-stromboli-100">
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {step}
              </span>
            </div>
            <div className="text-right">
              <span className="text-xs font-semibold inline-block">
                {step === 1 ? "50%" : "100%"}
              </span>
            </div>
          </div>
          <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-stromboli-200">
            <div
              style={{ width: `${step === 1 ? "50%" : "100%"}` }}
              className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary-default transition-all duration-500 ease-in-out"
            ></div>
          </div>
        </div>

        <h2 className="text-3xl font-bold text-center text-primary-default mb-8">
          ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        </h2>

        <form onSubmit={handleSubmit}>
          {error && (
            <div
              className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-6"
              role="alert"
            >
              <span className="block sm:inline">{error}</span>
            </div>
          )}

          {step === 1 && (
            <>
              <FormGroup
                label="HN (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ 7 ‡∏´‡∏•‡∏±‡∏Å)"
                type="text"
                id="hn"
                name="hn"
                value={hn}
                onChange={(e) => setHn(e.target.value)}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 1234567"
                required
                pattern="\d{7}"
                title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å HN ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 7 ‡∏´‡∏•‡∏±‡∏Å"
              />

              <FormGroup
                label="‡πÄ‡∏û‡∏®"
                as="select"
                id="gender"
                name="gender"
                value={gender}
                onChange={(e) => setGender(e.target.value)}
                required
                options={[{ value: "female", label: "‡∏´‡∏ç‡∏¥‡∏á" }]}
              />

              <FormGroup
                label="‡∏ä‡∏∑‡πà‡∏≠"
                type="text"
                id="firstName"
                name="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"
                required
              />

              <FormGroup
                label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                type="text"
                id="lastName"
                name="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                required
              />

              <FormGroup
                label="‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î"
                type="date"
                id="dateOfBirth"
                name="dateOfBirth"
                value={dateOfBirth}
                onChange={(e) => setDateOfBirth(e.target.value)}
                required
              />

              <div className="flex justify-end mt-6">
                <Button
                  type="button"
                  className="w-full bg-primary-default hover:bg-stromboli-400 text-white"
                  onClick={handleNext}
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </Button>
              </div>
            </>
          )}

          {step === 2 && (
            <>
              <FormGroup
                label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                type="tel"
                id="phoneNumber"
                name="phoneNumber"
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 0812345678"
                required
                pattern="\d{10}"
                title="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å"
              />

              <FormGroup
                label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                type="email"
                id="email"
                name="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                required
              />

              <FormGroup
                label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                type="password"
                id="password"
                name="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
                required
                minLength={6}
              />

              <FormGroup
                label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                required
              />

              <div className="flex justify-between mt-6">
                <Button
                  type="button"
                  variant="secondary"
                  className="w-1/2 mr-2 bg-stromboli-400"
                  onClick={handleBack}
                  disabled={loading}
                >
                  ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                </Button>
                <Button
                  type="submit"
                  variant="success"
                  className="w-1/2 ml-2 bg-primary-default hover:bg-stromboli-400 text-white"
                  disabled={loading}
                >
                  {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..." : "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"}
                </Button>
              </div>
            </>
          )}

          <p className="text-center text-sm mt-4 text-gray-600">
            ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß?{" "}
            <Link
              to="/login"
              className="text-secondary-default hover:underline font-semibold"
            >
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            </Link>
          </p>
        </form>
      </div>
    </div>
  );
};

export default Register;