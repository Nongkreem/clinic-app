const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const db = require("../config/db"); // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° MySQL ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
const User = require("../models/User");
require("dotenv").config();

// ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô email ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏°‡∏±‡πâ‡∏¢
const isHospitalEmail = (email) => {
  return email.endsWith("@vejnaree.ac.th");
};

exports.register = async (req, res) => {
  const {
    email,
    password,
    role,
    hn,
    firstName,
    lastName,
    dateOfBirth,
    phoneNumber,
    gender,
  } = req.body;

  if (
    !email ||
    !password ||
    !role ||
    !hn ||
    !firstName ||
    !lastName ||
    !dateOfBirth ||
    !phoneNumber ||
    !gender
  ) {
    return res
      .status(400)
      .json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  if (isHospitalEmail(email)) {
    return res
      .status(403)
      .json({ success: false, message: "‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }

  if (role !== "patient") {
    return res
      .status(400)
      .json({
        success: false,
        message:
          "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ",
      });
  }

  try {

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ HN ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å blacklist ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingPatient] = await db.execute(
      "SELECT is_blacklisted FROM patient WHERE hn = ?",
      [hn]
    );

    if (existingPatient.length > 0 && existingPatient[0].is_blacklisted) {
      return res.status(403).json({
        success: false,
        message:
          "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
      });
    }
    const result = await User.register(
      email,
      password,
      role,
      hn,
      firstName,
      lastName,
      dateOfBirth,
      phoneNumber,
      gender
    );

    if (result.success) {
      res.status(201).json(result);
    } else {
      if (
        result.message.includes("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß") ||
        result.message.includes("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
      ) {
        return res.status(409).json(result);
      }
      res.status(500).json(result);
    }
  } catch (error) {
    console.error("Registration controller error:", error);
    res
      .status(500)
      .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

exports.login = async (req, res) => {
  const { email, password } = req.body;

  console.log("Login payload:", email, password);

  if (!email || !password) {
    return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }

  try {
    let user = await User.findByUserEmail(email);
    if (!user) {
      return res.status(401).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isHospitalStaff = user.role === "doctor" || user.role === "nurse" || user.role === "head_nurse";

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ account ‡πÉ‡∏ô user_accounts
    if (isHospitalStaff && !user.id) {
      const hashedPassword = await bcrypt.hash(password, 10);
      const [insertRes] = await db.execute(
        `INSERT INTO user_accounts (email, password_hash, role, entity_id, is_counter_terminal)
         VALUES (?, ?, ?, ?, ?)`,
        [email, hashedPassword, user.role, user.entity_id, 0]
      );
      user.id = insertRes.insertId;
      user.password_hash = hashedPassword;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ account ‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£ login
    if (!isHospitalStaff && !user.id) {
      return res.status(401).json({
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return res.status(401).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    if (user.role === "patient") {
      const [rows] = await db.execute(
        "SELECT is_blacklisted FROM patient WHERE patient_id = ?",
        [user.entity_id]
      );

      if (rows.length > 0 && rows[0].is_blacklisted) {
        return res.status(403).json({
          message:
            "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å",
        });
      }
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ Nurse
    let isTodayScheduled = false;
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (user.role === "nurse") {
      const today = new Date().toISOString().split("T")[0]; //YYYY-MM-DD
      const [rows] = await db.execute(
        `SELECT COUNT(*) as count
          FROM counterTerminalSchedules
          WHERE nurse_id = ? AND schedule_date = CURDATE()
          LIMIT 1
        `,
        [user.entity_id]
      );
      isTodayScheduled = rows.length > 0;
    }

    const canBeCounter = user.is_counter_terminal === 1 // ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏µ‡πà counter
    const isCounterTerminal = canBeCounter && isTodayScheduled; // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• + ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    
    // ---- service ids ----
    let serviceIds = [];
    if (user.role === "doctor" && user.service_ids) {
      serviceIds = user.service_ids;
    } else if (user.role === "nurse" && user.nurse_service_id) {
      serviceIds = [user.nurse_service_id];
    }


    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
    const token = jwt.sign(
      {
        id: user.id,
        role: user.role,
        email: user.email,
        entity_id: user.entity_id,
        service_id: serviceIds,
        is_counter_terminal: isCounterTerminal
      },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.json({
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      token,
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        entity_id: user.entity_id,
        service_id: serviceIds,
        is_counter_terminal: isCounterTerminal
      },
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ error: err.message });
  }
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ HN ‡∏ñ‡∏π‡∏Å blacklist ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
exports.checkBlacklist = async (req, res) => {
  console.log('üîµ === checkBlacklist function CALLED ===');
  
  try {
    const { hn } = req.body;
    console.log('üîç Received HN:', hn);

    if (!hn) {
      console.log('‚ùå No HN provided');
      return res.status(400).json({ 
        success: false, 
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN" 
      });
    }

    console.log('üîç Querying database for HN:', hn);
    
    const [rows] = await db.execute(
      "SELECT is_blacklisted FROM patient WHERE hn = ? LIMIT 1",
      [hn]
    );

    console.log('üìä Query result:', rows);
    console.log('üìä Rows count:', rows.length);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• = ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å blacklist
    if (rows.length === 0) {
      console.log('‚ÑπÔ∏è Patient not found in database - allowing registration (new patient)');
      return res.status(200).json({ 
        success: true, 
        isBlacklisted: false,
        message: "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" 
      });
    }

    const isBlacklisted = rows[0].is_blacklisted === 1;
    console.log('‚úÖ is_blacklisted value:', rows[0].is_blacklisted);
    console.log('‚úÖ isBlacklisted (boolean):', isBlacklisted);

    const response = { 
      success: true, 
      isBlacklisted 
    };
    
    console.log('üì§ Sending response:', response);
    return res.status(200).json(response);
    
  } catch (err) {
    console.error("‚ùå checkBlacklist error:", err);
    console.error("‚ùå Error stack:", err.stack);
    
    return res.status(500).json({ 
      success: false, 
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
      error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
};

console.log('üìç checkBlacklist function exported:', typeof exports.checkBlacklist);